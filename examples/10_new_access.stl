typedefs
  Bool     = 1 + 1 ;
  Nat      = rec x : *ns. @(1 + x) ;

  Servidor = ?Nat.!Bool.End ;
  Cliente  = !Nat.?Bool.End
end

let un false : Bool = inl [1] {} in
let un true  : Bool = inr [1] {} in

let un zero : Nat = fold [Nat] @(inl [Nat] {}) in

let un discard : Nat -o 1 =
  \lin n : Nat.
    let @x = unfold n in {}
in

let un isZero : Nat -o Bool =
  \lin n : Nat.
    let @unfoldN = unfold n in
    case unfoldN of
      inl unit  -> let {} = unit in true ;
      inr predN -> let {} = discard predN in false
in

-------------------------------------------------------

let un servidor : Servidor -o 1 =
  \lin s0 : Servidor.
    let {n, s1} = receive s0          in
    let lin s2  = send (isZero n) s1 in
    close s2
in

let un cliente : Cliente -o Bool =
  \lin c0 : Cliente.
    let lin c1  = send zero c0 in
    let {b, c2} = receive c1   in
    let {}      = close c2     in
    b
in

new access [Servidor] srvAccess, cltAccess   in
let {} = spawn (servidor (accept srvAccess)) in
cliente (request cltAccess)