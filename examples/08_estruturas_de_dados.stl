typedefs
  Bool  = 1 + 1 ;
  Bool' = @(1 + 1) ;
  Nat   = rec X : *ns. 1 + X
end

let un false : Bool = inl [1] {} in
let un true  : Bool = inr [1] {} in

let un discardBool : Bool -o 1 =
  \lin b : Bool.
    case b of
      inl unit -> unit ;
      inr unit -> unit
in

let un duplicateBool : Bool -o Bool * Bool =
  \lin n : Bool.
    case n of
      inl unit -> {inl [1] unit, inl [1] {}} ;
      inr unit -> {inr [1] unit, inr [1] {}}
in

let un or : Bool -o Bool -o Bool =
  \lin a : Bool.
  \lin b : Bool.
    case a of
      inl unit ->
        let {} = unit in
        b ;

      inr unit ->
        let {} = unit          in
        let {} = discardBool b in
        true
in

let un false' : Bool' = @(inl [1] {}) in
let un true'  : Bool' = @(inr [1] {}) in

let un discardBool' : Bool' -o 1 =
  \lin b : Bool'.
    let @x = b in
    {}
in

let un zero : Nat = fold [Nat] (inl [Nat] {}) in

let un succ : Nat -o Nat =
  \lin n : Nat.
    fold [Nat] (inr [1] n)
in

let rec add : Nat -o Nat -o Nat =
  \lin n : Nat.
  \lin m : Nat.
    case unfold n of
      inl u ->
        let {} = u in
        m ;

      inr pred_n ->
        succ (add pred_n m)
in

let rec discardNat : Nat -o 1 =
  \lin n : Nat.
    case unfold n of
      inl u ->
        u ;

      inr m ->
        discardNat m
in

let un isZero : Nat -o Bool =
  \lin n : Nat.
    case unfold n of
      inl u ->
        let {} = u in
        true ;

      inr m ->
        let {} = discardNat m in
        false
in

add (succ zero) (succ (succ zero))