typevars
  Nat  : *ns
end

typedefs
  Servidor = &{ ?Nat.End, !Nat.End } ;
  Cliente  = +{ !Nat.End, ?Nat.End }
end

vars
  un zero      : Nat ;
  un succ      : Nat -o Nat ;
  un discard   : Nat -o 1 ;
  un duplicate : Nat -o Nat * Nat
end

let rec servidor : Nat -o Accept Servidor -> 1 =
  \lin valor : Nat.
  \un srvAccess : Accept Servidor.
    let lin s0 = accept srvAccess in
    branch s0 of
      left s1 ->
        let {novoValor, s2} = receive s1    in
        let {}              = close s2      in
        let {}              = discard valor in
        servidor novoValor srvAccess ;

      right s1 ->
        let {valor, valor'} = duplicate valor in
        let lin s2          = send valor s1   in
        let {}              = close s2        in
        servidor valor' srvAccess
in

let un cliente_put : Request Cliente -> 1 =
  \un cltAccess : Request Cliente.
    let lin c0 = request cltAccess   in
    let lin c1 = select left c0      in
    let lin c2 = send (succ zero) c1 in
    close c2
in

let un cliente_get : Request Cliente -> Nat =
  \un cltAccess : Request Cliente.
    let lin c0  = request cltAccess in
    let lin c1  = select right c0   in
    let {n, c2} = receive c1        in
    let {}      = close c2          in
    n
in

new access [Servidor] srvAccess, cltAccess in
let {} = spawn (servidor zero srvAccess)   in
let {} = spawn (cliente_put cltAccess)     in
cliente_get cltAccess