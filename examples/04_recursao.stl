typedefs
  Bool     = 1 + 1 ;
  Nat      = rec x : *ns. @(1 + x) ;
  
  Servidor = rec X : *s . ?Nat.!Bool.X ;
  Cliente  = rec X : *s . !Nat.?Bool.X
end

let un false : Bool = inl [1] {} in
let un true  : Bool = inr [1] {} in

let un zero : Nat = fold [Nat] @(inl [Nat] {}) in

let un discardNat : Nat -o 1 =
  \lin n : Nat.
    let @x = unfold n in {}
in

let un discardBool : Bool -o 1 =
  \lin b : Bool.
    case b of
      inl unit -> unit ;
      inr unit -> unit
in

let un isZero : Nat -o Bool =
  \lin n : Nat.
    let @unfoldN = unfold n in
    case unfoldN of
      inl unit  -> let {} = unit in true ;
      inr predN -> let {} = discardNat predN in false
in

-------------------------------------------------------

let rec servidor : Servidor -o 1 =
  \lin s0 : Servidor.
    let {n, s1} = receive (unfold s0) in
    let lin s2  = send (isZero n) s1  in
    servidor s2
in

let rec cliente : Cliente -o 1 =
  \lin c0  : Cliente.
    let lin c1  = send zero (unfold c0) in
    let {b, c2} = receive c1            in
    let {}      = discardBool b         in
    cliente c2
in

let lin c = fork servidor in
cliente c